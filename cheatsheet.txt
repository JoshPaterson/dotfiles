vim motion: {hjkl}                      # (n) move cursor
vim motion: gj                          # (n) move cursor down a display line
vim motion: gk                          # (n) move cursor up a display line
vim motion: H                           # (n) jump to top of screen
vim motion: M                           # (n) jump to middle of screen
vim motion: L                           # (n) jump to bottom of screen
vim motion: gM                          # (n) jump to middle of text line
vim motion: gm                          # (n) jump to middle of display line
vim motion: w                           # (n) jump forwards to the start of a word
vim motion: W                           # (n) jump forwards to the start of a WORD
vim motion: e                           # (n) jump forwards to the end of a word
vim motion: E                           # (n) jump forwards to the end of a WORD
vim motion: ge                          # (n) jump backwards to the end of a word
vim motion: gE                          # (n) jump backwards to the end of a WORD
vim motion: b                           # (n) jump backwards to the start of a word
vim motion: B                           # (n) jump backwards to the start of a WORD
vim motion: 0                           # (n) jump to the start of the line
vim motion: g0                          # (n) jump to the start of the display line
vim motion: ^                           # (n) jump to the first non-blank character of the line
vim motion: g^                          # (n) jump to the first non-blank character of the display line
vim motion: $                           # (n) jump to the end of the line
vim motion: g$                          # (n) jump to the end of the display line
vim motion: _                           # (n) jump to the first non-blank character {count}-1 lines below
vim motion: g_                          # (n) jump to the last non-blank character {count}-1 lines below
vim motion: -                           # (n) jump to the first non-blank character {count} lines above
vim motion: + or <Ctrl-m>               # (n) jump to the first non-blank character {count} lines below
vim motion: gg                          # (n) jump to the first line of the document
vim motion: G                           # (n) jump to the last line of the document
vim motion: {count}G                    # (n) jump to line {count}
vim motion: f{char}                     # (n) jump forward to {char}
vim motion: F{char}                     # (n) jump backward to {char}
vim motion: t{char}                     # (n) jump forward to just before {char}
vim motion: T{char}                     # (n) jump backward to just before {char}
vim motion: }                           # (n) jump to next paragraph (or function/block, when editing code)
vim motion: {                           # (n) jump to previous paragraph (or function/block, when editing code)
vim motion: go                          # (n) jump to {count}th byte in buffer

vim scroll: zz                          # (n) scroll so cursor is in center of screen
vim scroll: zt                          # (n) scroll so cursor is at top of screen
vim scroll: zb                          # (n) scroll so cursor is at bottom of screen
vim scroll: <Ctrl-f>                    # (n) scroll forward {count} full screens
vim scroll: <Ctrl-b>                    # (n) scroll back {count} full screens
vim scroll: <Ctrl-d>                    # (n) scroll forward {count} half screens
vim scroll: <Ctrl-u>                    # (n) scroll back {count} half screens
vim scroll: <Ctrl-e>                    # (n) scroll forward {count} lines
vim scroll: <Ctrl-y>                    # (n) scroll back {count} lines
vim scroll: ze                             # scroll horizontally so cursor is at right side of screen
vim scroll: zh                             # scroll screen {count} characters to the right
vim scroll: zl                             # scroll {count} characters to the left
vim scroll: zs                             # scroll vertically so cursor is at right side of screen
vim z: z<CR>                          # move cursor to first non-blank, scroll cursor to top of window
vim z: z{height}<CR>                  # redraw, make window {height} lines high
vim z: z+                             # move cursor to line {count}, scroll cursor to top of window
vim z: z-                             # move cursor to line {count}, scroll cursor to bottom of window
vim z: z.                             # move cursor to line {count}, scroll cursor to center of window
vim z: z^                             # move cursor to line just above window, scroll line to bottom of window
vim z: {count}z^                      # scroll so line {count} is at bottom of window before doing z^

vim insert: i                           # (n) insert before the cursor
vim insert: gi                          # (n) resume insert mode where it was last stopped
vim insert: I                           # (n) insert at the first non-blank character in line
vim insert: gI                          # (n) insert at the beginning of the line
vim insert: a                           # (n) insert (append) after the cursor
vim insert: A                           # (n) insert (append) at the end of the line
vim insert: o                           # (n) append (open) a new line below the current line
vim insert: O                           # (n) append (open) a new line above the current line

vim edit: c{motion}                   # (n) operator, change
vim edit: cc                          # (n) change (replace) entire line
vim edit: C or c$                     # (n) change (replace) from cursor to end of line
vim edit: cw                          # (n) change (replace) to the start of the next word
vim edit: ce                          # (n) change (replace) to the end of the next word
vim edit: cb                          # (n) change (replace) to the start of the previous word
vim edit: c0                          # (n) change (replace) to the start of the line
vim insert: r{char}                     # (n) replace {count} characters with {char}
vim insert: gr{char}                    # (n) virtual replace {count} characters with {char}
vim edit: s or cl                     # (n) delete character and substitute text
vim edit: S or cc                     # (n) delete line and substitute text (same as cc)
vim edit: ~                           # (n) swap case
vim edit: g~{motion}                  # (n) operator, swaps case
vim edit: gu{motion}                  # (n) operator, make lowercase
vim edit: gU{motion}                  # (n) operator, make uppercase
vim edit: J                           # (n) join/ combine lines removing indents
vim edit: gJ                          # (n) join/ combine lines without removing indents
vim edit: xp                          # (n) swap/ transpose two letters (delete and paste)
vim edit: d{motion}                   # (n) operator, delete (cut)
vim edit: y{motion}                   # (n) operator, yank (copy)
vim edit: g>{motion}                  # (n) operator, indent
vim edit: g<{motion}                  # (n) operator, unindent
vim edit: g={motion}                  # (n) operator, autoindent
vim edit: g!{motion}                  # (n) operator, filter lines through external program
vim edit: <Ctrl-a>                    # (n) add {count} to the next number in the line
vim edit: <Ctrl-x>                    # (n) subtract {count} from the next number
vim edit: g<Ctrl-a>                   # (n) (visual) make consecutive numbers (add {count}*n to the number in the nth selected line)
vim edit: gq{motion}                  # (n) operator, format paragraph with par
vim edit: gqq                         # (n) format line with par
vim edit: gw{motion}                  # (n) operator, format paragraph with par and keep cursor in place
vim edit: gww                         # (n) format line with par and keep cursor in place
vim edit: g?{motion}                  # (n) operator, encode with rot13
vim edit: g??                         # (n) encode current line with rot13

vim edit: .                           # (n) repeat last command
vim edit: u                           # (n) undo
vim edit: <Ctrl-r>                    # (n) redo

vim info: ga                          # (n) prints ascii value of character under cursor
vim info: <Ctrl-g>                    # (n) prints file name as typed, cursor position, file status
vim info: 1<Ctrl-g>                   # (n) prints full file path, cursor position, file status
vim info: 2<Ctrl-g>                   # (n) prints buffer number, full file path, cursor position, file status
vim info: g<Ctrl-g>                   # (n) prints cursor position: column, line, word, character, and byte

vim control: <Ctrl-l>                         # (n) redraw screen
vim control: <Ctrl-z>                         # (n) suspend nvim

vim insert mode: :h ins-special-keys       # (c) show help for control keys in insert mode
vim insert mode: <Ctrl-a>                  # (i) insert previously inserted text
vim insert mode: <Ctrl-c>                  # (i) quit insert mode
vim insert mode: <Ctrl-d>                  # (i) remove tab at beginning of line
vim insert mode: 0<Ctrl-d>                 # (i) remove all indent from current line
vim insert mode: ^<Ctrl-d>                 # (i) remove all indent from current line, indent restored for next line
vim insert mode: <Ctrl-e>                  # (i) insert character from below cursor
vim insert mode: <Ctrl-g>j                 # (i) move cursor down {count} lines, stay in insert mode
vim insert mode: <Ctrl-g>k                 # (i) move cursor up {count} lines, stay in insert mode
vim insert mode: <Ctrl-h>                  # (i) delete character before the cursor (same as <BS>)
vim insert mode: <Ctrl-i>                  # (i) insert a tab (same as <Tab>)
vim insert mode: <Ctrl-j>                  # (i) begin new line (same as <CR>)
vim insert mode: <Ctrl-k>                  # (i) begin digraph entry
vim insert mode: <Ctrl-n>                  # (i) find next location from last search
vim insert mode: <Ctrl-o>                  # (i) go to insert-normal mode
vim insert mode: <Ctrl-p>                  # (i) find previous location from last search
vim insert mode: <Ctrl-q>                  # (i) insert next non-digit literally (same as ctrl-v)
vim insert mode: <Ctrl-r>{register}        # (i) paste from register in insert mode
vim insert mode: <Ctrl-r>+                 # (i) paste from X11 system clipboard in insert mode
vim insert mode: <C-r><C-r>{register}      # (i) paste contents of register literally
vim insert mode: <C-r><C-o>{register}      # (i) paste contents of register literally, don't auto-indent
vim insert mode: <C-r><C-p>{register}      # (i) paste contents of register literally and fix indent
vim insert mode: <Ctrl-t>                  # (i) insert tab at beginning of line
vim insert mode: <Ctrl-u>                  # (i) delete all newly entered characters before the cursor
vim insert mode: <Ctrl-v>                  # (i) insert next non-digit literally
vim insert mode: <Ctrl-w>                  # (i) delete word before the cursor
vim insert mode: <Ctrl-x>                  # (i) enter Ctrl-x mode (completion)
vim insert mode: <Ctrl-y>                  # (i) insert character from above cursor
vim insert mode: <Ctrl-@>                  # (i) insert previously inserted text and leave insert mode
vim insert mode: <Ctrl-_>                  # (i) switch languages (e.g. English to Hebrew)
vim insert mode: <Ctrl-^>                  # (i) toggle use of typing language characters
vim insert mode: <Ctrl-]>                  # (i) trigger abbreviation without inserting a character

vim edit: :r [filename]               # (c) read/ add contents of file below cursor
vim edit: :0r [filename]              # (c) read/ add contents of file at beginning of file
vim edit: :$r [filename]              # (c) read/ add contents of file at last line

vim visual: v                         # (n) start visual mode
vim visual: V                         # (n) start linewise visual mode
vim visual: <Ctrl-v>                  # (n) start visual block mode
vim visual: o                         # (v) move cursor to other end of marked area
vim visual: O                         # (vb) move to other corner of block
vim visual: gv                        # (v) reselect previous visual area

vim object: a"                        # double quoted string with quotes
vim object: i"                        # double quoted string without quotes
vim object: a'                        # single quoted string with quotes
vim object: i'                        # single quoted string without quotes
vim object: ab or a( or a)            # a block, from "[(" to "])", with brackets
vim object: ib or i( or i)            # inner block, from "[(" to "])", without brackets
vim object: a< or a>                  # a <>, from "<" to ">", with angles
vim object: i< or i>                  # inner <>, from "<" to ">", without angles
vim object: aB or a{ or a}            # a block, from "[{" to "]}", with brackets
vim object: iB or i{ or i}            # inner block, from "[{" to "]}", without brackets
vim object: aw                        # word with a space
vim object: iw                        # word without space
vim object: aW                        # WORD with a space
vim object: iW                        # WORD without a space
vim object: a[ or a]                  # a [], from "[" to the matching "]", with brackets
vim object: i[ or i]                  # a [], from "[" to the matching "]", without brackets
vim object: a`                        # string in backticks
vim object: i`                        # string in backticks, without backticks
vim object: ap                        # a paragraph, with whitespace
vim object: ip                        # a paragraph, without whitespace
vim object: as                        # a sentence, with whitespace
vim object: is                        # a sentence, without whitespace
vim object: at                        # a tag block, with whitespace
vim object: it                        # a tag block, without whitespace

vim cut paste: yy                     # (n) yank (copy) {count} lines
vim cut paste: y{motion}              # (n) yank (copy) from cursor to {motion}
vim cut paste custom: Y               # (n) yank (copy) from cursor to end of line
vim cut paste: p                      # (n) put (paste) unnamed register (") after cursor
vim cut paste: gp                     # (n) put (paste) unnamed register (") after cursor and move cursor to end of pasted text
vim cut paste: P                      # (n) put (paste) unnamed register (") before cursor
vim cut paste: gP                     # (n) put (paste) unnamed register (") before cursor and move cursor to end of pasted text
vim cut paste: q{register}q           # (n) clear register
vim cut paste: dd                     # (n) delete (cut) {count} lines
vim cut paste: d{motion}              # (n) delete (cut) from cursor to {motion}
vim cut paste: D or d$                # (n) delete (cut) to the end of the line
vim cut paste: x                      # (n) delete (cut) {count} characters
vim cut paste: zp                     # (n) put (paste) in block mode without trailing spaces
vim cut paste: zP                     # (n) put (paste) in block mode without trailing spaces
vim cut paste: zy                     # (n) yank (copy) without trailing spaces

vim search: :/{pattern}               # (c) search forward for pattern
vim search: :/ $                      # (c) find trailing whitespace
vim search: :/{pattern}/{offset}      # (c) search forward for pattern and move cursor {offset} lines
vim search: :/<CR>                    # (c) search again with last used pattern
vim search: ://{offset}<CR>           # (c) search again with last used pattern and move cursor {offset} lines
vim search: :?{pattern}               # (c) search forward for pattern
vim search: :?{pattern}?{offset}      # (c) search forward for pattern and move cursor {offset} lines
vim search: :?<CR>                    # (c) search again with last used pattern
vim search: :??{offset}<CR>           # (c) search again with last used pattern and move cursor {offset} lines
vim search: *                         # (n) search forward for the {count}th occurrence of word nearest cursor
vim search: #                         # (n) search backward for the {count}th occurrence of word nearest cursor
vim search: g*                        # (n) search forward for the {count}th occurrence of word nearest cursor even if embedded in other word
vim search: g#                        # (n) search backward for the {count}th occurrence of word nearest cursor even if embedded in other word
vim search: n                         # (n) repeat search in same direction
vim search: gn                        # (n) repeat search in same direction, visually select search term
vim search: N                         # (n) repeat search in opposite direction
vim search: gN                        # (n) repeat search in opposite direction, visually select search term
vim search: :noh                      # (c) remove highlighting of search matches
vim search: :let @/ = ""              # (c) clear last used search pattern

vim search patterns: \v               # (c) make following pattern very magic

vim search offset: {num}              # {num} lines down, in column 1
vim search offset: +{num}             # {num} lines down, in column 1
vim search offset: -{num}             # {num} lines up, in column 1
vim search offset: e+{num}            # {num} characters to the right of the end of the match
vim search offset: e-{num}            # {num} characters to the left of the end of the match
vim search offset: s+{num} or b+{num} # {num} characters to the right of the start of the match
vim search offset: s-{num} or b-{num} # {num} characters to the left of the start of the match
vim search offset: ;{pattern}         # find the first occurrence of pattern2 after pattern1
vim search offset: {offset};{pattern} # find the first occurrence of pattern2 after offset after pattern2

vim exit: :w or :w /path              # (c) write (save) the file, but don't exit
vim exit: :W                          # (c) write (save) the file as sudo, but don't exit
vim exit: :w !sudo tee %              # (c) write out the current file using sudo
vim exit: :wq or :x or ZZ             # (c) write (save) and quit
vim exit: :q                          # (c) quit (fails if there are unsaved changes)
vim exit: :q! or ZQ                   # (c) quit and throw away unsaved changes
vim exit: :bd or bd!                  # (c) Close the file (buffer)

vim window: :e file                   # (c) edit a file in a new buffer
vim window: :bnext or :bn             # (c) go to the next buffer
vim window: :bprev or :bp             # (c) go to the previous buffer
vim window: :bd                       # (c) delete a buffer (close a file)
vim window: :ls                       # (c) list all open buffers
vim window: :sp file                  # (c) open a file in a new buffer and split window
vim window: :vsp file                 # (c) open a file in a new buffer and vertically split window


vim window mode: <Ctrl-w>             # (n) enter window mode
vim window mode: v                    # (w) split window vertically
vim window mode: s                    # (w) split window horizontally, new window {count} lines high
vim window mode: ^                    # (w) split window and edit alternate file
vim window mode: f                    # (w) split window and jump to filename under cursor
vim window mode: F                    # (w) split window and jump to filename and line number under cursor
vim window mode: gf                   # (w) open new tab and jump to filename under cursor
vim window mode: gF                   # (w) open new tab and jump to filename and line number under cursor
vim window mode: w                    # (w) move cursor to next window
vim window mode: p                    # (w) move cursor to previous window
vim window mode: P                    # (w) move cursor to preview window
vim window mode: R                    # (w) rotate windows up {count} times
vim window mode: T                    # (w) move current window to new tab page
vim window mode: q                    # (w) quit current window
vim window mode: v                    # (w) split window vertically
vim window mode: h                    # (w) move cursor to the left
vim window mode: l                    # (w) move cursor to the right
vim window mode: j                    # (w) move cursor down
vim window mode: k                    # (w) move cursor up
vim window mode: b                    # (w) move cursor to the bottommost window
vim window mode: t                    # (w) move cursor to the topmost window
vim window mode: c                    # (w) close current window
vim window mode: z                    # (w) close preview window
vim window mode: o                    # (w) close all but current window (like :only)
vim window mode: d                    # (w) split window and jump to definition under cursor
vim window mode: =                    # (w) make all windows have equal size
vim window mode: _                    # (w) make current window {count} lines tall
vim window mode: |                    # (w) make current window {count} lines wide
vim window mode: H                    # (w) move current window to far left
vim window mode: J                    # (w) move current window to far bottom
vim window mode: K                    # (w) move current window to far top
vim window mode: L                    # (w) move current window to far right
vim window mode: +                    # (w) make current window taller
vim window mode: -                    # (w) make current window shorter
vim window mode: <                    # (w) make current window narrower
vim window mode: >                    # (w) make current window wider
vim window: z{count}<CR>              # (n) make current window {count} lines tall
vim window: <Ctrl-Shift-+>            # (n) make text bigger, zoom in
vim window: <Ctrl-Shift-->            # (n) make text smaller, zoom out

vim tabs: {n}gt                       # (n) move to tab n
vim tabs: <Ctrl-wT>                   # (n) move the current split window into its own tab
vim tabs: gt or :tabnext or :tabn     # (n) move to the next tab
vim tabs: gT or :tabprev or :tabp     # (n) move to the previous tab
vim tabs: :{range}tabnew              # (c) open new empty tab after {range}
vim tabs: :tabmove {n}                # (c) move current tab to the nth position (indexed from 0)
vim tabs: :tabclose or :tabc          # (c) close the current tab and all its windows
vim tabs: :tabonly or :tabo           # (c) close all tabs except for the current one
vim tabs: :tabdo command              # (c) run the command on all tabs (e.g. :tabdo q - closes all opened tabs)

vim registers: :reg                   # (c) show contents of all registers
vim registers: "_                     # black hole register
vim registers: ""                     # unnamed register
vim registers: "0                     # yank register
vim registers: "-                     # small delete (less than 1 line) register
vim registers: "+                     # X11 system clipboard register
vim registers: "*                     # X11 primary cliipboard register
vim registers: "=                     # expression register
vim registers: "%                     # current filename (read only register)
vim registers: "#                     # filename of alternate file (read only register)
vim registers: ".                     # last inserted text (read only register)
vim registers: ":                     # last ex command (read only register)
vim registers: "/                     # last search pattern (read only register)

vim marks: :marks              # (c) show all marks
vim marks: m{a-zA-Z}           # (n) set mark
vim marks: `{a-z}              # (n) jump to exact mark
vim marks: '{A-Z}              # (n) jump to first non-blank character in mark's line
vim marks: g`{a-z}             # (n) jump to exact mark without changing jump list
vim marks: g'{A-Z}             # (n) jump to first non-blank character in mark's line without changing jump list
vim marks: <                   # first line of last selected visual area
vim marks: >                   # last line of last selected visual area
vim marks: [                   # first character of previously changed or yanked text
vim marks: ]                   # last character of previously changed or yanked text
vim marks: '                   # position where last m' command was given
vim marks: `                   # position where last m` command was given
vim marks: "                   # position where current buffer was last exited
vim marks: ^                   # position where insert mode was last stopped
vim marks: .                   # position where last change was made
vim marks: ]'                  # jump to {count}th lowercase mark below cursor (first non-blank character)
vim marks: ['                  # jump to {count}th lowercase mark above cursor (first non-blank character)
vim marks: ]`                  # jump to {count}th lowercase mark below cursor
vim marks: [`                  # jump to {count}th lowercase mark above cursor

vim-signature marks: m{a-zA-Z}        # toggle mark
vim-signature marks: dm{a-zA-Z}       # delete mark
vim-signature marks: m,               # place next available mark
vim-signature marks: m.               # if no mark on line, place next available mark. Otherwise remove mark
vim-signature marks: m-               # remove all marks from current line
vim-signature marks: m<Space>         # remove all marks from current buffer
vim-signature marks: ]` or [`         # jump to next or previous mark
vim-signature marks: ]' or ['         # jump to start of line for next or previous mark
vim-signature marks: `] or `[         # jump by alphabetical order to next or previous mark
vim-signature marks: '] or '[         # jump by alphabetical order to start of line with next or previous mark
vim-signature marks: m/               # open location list and display marks from current buffer
vim-signature marks: m[0-9]           # toggle corresponding marker !@#$%^&*()
vim-signature marks: m<S-[0-9]>       # remove all markers of same type
vim-signature marks: ]- or [-         # jump to next or previous line with mark of same type
vim-signature marks: ]= or [=         # jump to next or previous line with mark of any type
vim-signature marks: m?               # open location list and display markers from current buffer
vim-signature marks: m<BS>            # remove all markers

vim jump: :jumps                      # (c) show jump list
vim jump: <Ctrl-o>                    # (n) move back on jump list
vim jump: <Ctrl-i>                    # (n) move forward on jump list
vim jump: (                           # (n) jump to previous sentence
vim jump: )                           # (n) jump to next sentence
vim jump: {                           # (n) jump to previous paragraph
vim jump: }                           # (n) jump to next paragraph
vim jump: :{count}                    # (n) jump to line number
vim jump: {count}G                    # (n) jump to line number
vim jump: gf                          # (n) jump to filename under cursor
vim jump: gd                          # (n) jump to local definition of word
vim jump: 1gd                         # (n) jump to local definition of word, ignore matches inside {} ending before cursor
vim jump: gD                          # (n) jump to global definition of word, ignore matches inside {} ending before cursor
vim jump: 1gD                         # (n) jump to global definition of word
vim jump: gx                          # (n) execute application for filename under cursor (opens url under cursor in browser)
vim jump: %                           # (n) jumps to matching (), [], and {}
vim jump: -                           # (n) jumps {count} lines upward to first non-blank character
vim jump: _                           # (n) jumps {count} lines downward to first non-blank character

vim changes: :changes                 # (c) show change list
vim changes: g;                       # (n) go to previous location in change list
vim changes: g,                       # (n) go to next location in change list
vim changes: gi                       # (n) go to last insertion and return to insert mode

vim mappings: :map                             # (c) shows all key mappings
vim mappings: :map {key-combo}                 # (c) shows what commands are mapped to {key-combo}
vim mappings: :nmap                            # (c) shows all key mappings for normal mode only
vim mappings: :imap                            # (c) shows all key mappings for insert mode only
vim mappings: :omap                            # (c) shows all key mappings for text objects
vim mappings: :vmap                            # (c) shows all key mappings for visual mode only
vim mappings: :verbose map                     # (c) shows all key mappings and where they were defined

vim modes: Q or gQ                         # (n) start ex mode
vim modes: R                               # (n) start replace mode
vim modes: gR                              # (n) start virtual replace mode
vim modes: <Ctrl-c>                        # (c) interrupt current command (same as <Esc>)
vim modes: {operator}v{motion}             # (n) make operator work character wise
vim modes: {operator}V{motion}             # (n) make operator work line wise
vim modes: {operator}<Ctrl-v>{motion}      # (n) make operator work block wise
vim modes: {object}                        # (v) extend visually selected region to include {object}

vim command mode: :{command}|:{command}  # (c) run multiple commands
vim command mode: <Ctrl-a>               # do completion on pattern in front of cursor and insert all matches
vim command mode: <Ctrl-b>               # cursor to beginning of command line
vim command mode: <Ctrl-d>               # list completions that match pattern in front of cursor
vim command mode: <Ctrl-e>               # cursor to end of command line
vim command mode: <Ctrl-f>               # show command-line window, show command history
vim command mode: <Ctrl-g>               # go to next match while typing search command
vim command mode: <Ctrl-t>               # go to previous match while typing search command
vim command mode: <Ctrl-k>               # enter digraph
vim command mode: <Ctrl-l>               # do completion, insert longest common part
vim command mode: <Ctrl-n>               # go to next match in wild match list
vim command mode: <Ctrl-p>               # go to previous match in wild match list
vim command mode: <Ctrl-u>               # clear command line
vim command mode: <Ctrl-v>               # insert next non-digit literally, insert 3 digit number as 1 byte
vim command mode: <Ctrl-w>               # delete word left of cursor
vim command mode: <Ctrl-]>               # trigger abbreviation
vim command mode: <Ctrl-^>               # toggle use of lmap mappings
vim command mode: <Ctrl-\> e {expr}      # replace command line with result of {expr}
vim command mode: <Tab>                  # do completion (if 'wildchar' is <Tab>)

vim: :so %                            # (c) reload current file
vim: :so $MYVIMRC                     # (c) reload vim settings while other file is current
vim: :h key-notation                  # (c) shows how to indicate keys in vim script
vim: :version                         # (c) show version and information about installed features
vim: :ju[mps]                         # (c) show jump list
vim: :color [theme_name]              # (c) change color theme
vim: gs                               # (n) go to sleep for {count} seconds (default 1)

vim bulk edit: :normal [commands]               # (c) perform normal mode commands on range
vim bulk edit: :norm [commands]                 # (c) perform normal mode commands on range
vim bulk edit: :normal! [commands]              # (c) perform normal mode commands on range without any mappings
vim bulk edit: :{range}g/{pattern}/{command}    # (c) perform command on lines that match pattern
vim bulk edit: :{range}v/{pattern}/{command}    # (c) perform command on lines that don't match pattern (v for inVerse)
vim bulk edit: :%s/old/new/g                    # (c) substitute all old with new throughout file
vim bulk edit: :%s/old/new/gc                   # (c) substitute all old with new throughout file with confirmation

vim: :set filetype?                   # (c) show filetype of current buffer
vim: :checkhealth                     # (c) check status of vim
vim: <Ctrl-^>                         # (n) open alternate file
vim: :pwd                             # (c) show working directory
vim: :LspInfo                         # (c) show status information about lsp servers


vim range: {count}:                   # (n) becomes :.,.+{count-1} to apply command to next {count} lines
vim range: :%                         # (c) applies to entire file
vim range: :0                         # (c) imaginary line before start of file
vim range: :$                         # (c) last line
vim range: :. or :                    # (c) applies to current line
vim range: :.,.+{n} or :,+{n}         # (c) applies to current line and next {n}
vim range: :.-{n},. or :-{n},         # (c) applies to previous {n} lines and current
vim range: :'<,'>                     # (c) applies to lines in last visually selected block
vim range: :'a,'b                     # (c) applies to lines from mark a to mark b
vim range: :.,$                       # (c) applies to current line through end of file

vim folds: zo                             # (n) open fold
vim folds: zO                             # (n) open folds recursively
vim folds: zv                             # (n) open enough folds to view cursor line
vim folds: za                             # (n) toggle fold
vim folds: zA                             # (n) toggle folds recursively
vim folds: zc                             # (n) close a fold
vim folds: zC                             # (n) close folds recursively
vim folds: zd                             # (n) delete a fold
vim folds: zD                             # (n) open folds recursively
vim folds: zE                             # (n) eliminate all folds
vim folds: zf{motion}                     # (n) create fold for text within {motion}
vim folds: zF                             # (n) create fold for N lines
vim folds: zj                             # (n) move to the start of the next fold
vim folds: zk                             # (n) move to the end of the previous fold
vim folds: zn                             # (n) reset fold on/off (to value of 'foldenable')
vim folds: zN                             # (n) turn folds on
vim folds: zi                             # (n) toggle folds on/off
vim folds: zM                             # (n) close all folds (set 'foldlevel' to 0)
vim folds: zm                             # (n) close one level of folds (subtract one from 'foldlevel')
vim folds: zr                             # (n) open one level of folds (add one to 'foldlevel')
vim folds: zR                             # (n) open all folds (set 'foldlevel' to the deepest fold)
vim folds: zx                             # (n) update folds: re-apply 'foldlevel' and do 'zv'
vim folds: zX                             # (n) undo manually opened and closed folds, do 'zx'
vim folds: :set foldcolumn=1              # (c) show folds in gutter
vim folds: :set foldcolumn=0              # (c) hide folds in gutter
vim folds: <Lead>zfap                     # (n) fold all paragraphs separated by empty lines

vim quickfix: :chistory               # (c) display 10 last used quickfix lists
vim quickfix: :{count}chistory        # (c) display quickfix list #{count}
vim quickfix: :colder                 # (c) display older quickfix list
vim quickfix: :cnewer                 # (c) display newer quickfix list
vim quickfix: :cn                     # (c) jump to the next match
vim quickfix: :cp                     # (c) jump to the previous match
vim quickfix: :copen                  # (c) open a window containing the list of matches

vim location: :chistory               # (c) display 10 last used location lists
vim location: :{count}chistory        # (c) display location list #{count}
vim location: :colder                 # (c) display older location list
vim location: :cnewer                 # (c) display newer location list

vim tags: :tselect {name} or :ts      # list tags that match {name}
vim tags: g]                          # list tags that match word under cursor (:tjump)
vim tags: :tjump {name} or :tj        # list tags that match {name}, jump to match if there is only 1
vim tags: g<Ctrl-]>                   # list tags that match word under cursor (:tjump), jump to match if there is only 1
vim tags: <Ctrl-t>                    # (n) jump to {count} older entry in tag stack

vim tagbar: <CR>                      # (n) jump to tag definition
vim tagbar: p                         # (n) jump to tag definition, but stay in tagbar window
vim tagbar: P                         # (n) show tag in preview window
vim tagbar: <Ctrl-n>                  # (n) go to next top level tag
vim tagbar: <Ctrl-p>                  # (n) go to previous top level tag
vim tagbar: <Space>                   # (n) display tag prototype
vim tagbar: v                         # (n) hide non-public tags
vim tagbar: + or <kPlus> or zo        # (n) open fold
vim tagbar: - or <kMinus> or zc       # (n) close fold
vim tagbar: o or za                   # (n) toggle fold
vim tagbar: * or <kMultiply> or zR    # (n) open all folds
vim tagbar: = or zM                   # (n) close all folds
vim tagbar: zr                        # (n) increment fold level by 1
vim tagbar: zm                        # (n) decrement fold level by 1
vim tagbar: zj                        # (n) go to next fold
vim tagbar: zk                        # (n) go to previous fold
vim tagbar: s                         # (n) toggle sort
vim tagbar: i                         # (n) toggle case insensitive sort option
vim tagbar: c                         # (n) toggle autoclose option
vim tagbar: t                         # (n) toggle pause
vim tagbar: x                         # (n) zoom window in/ out
vim tagbar: q                         # (n) close window
vim tagbar: ?                         # (n) toggle help
vim tagbar: <Lead>t                   # toggle tagbar window

vim spell check: z=                   # (n) give spelling suggestions
vim spell check: {count}z=            # (n) insert {count}th spelling suggestion
vim spell check: zg                   # (n) permanently mark word as correctly spelled
vim spell check: zug                  # (n) undo permanently mark word as correctly spelled
vim spell check: zG                   # (n) temporarily mark word as correctly spelled
vim spell check: zuG                  # (n) undo temporarily mark word as correctly spelled
vim spell check: zw                   # (n) permanently mark word as incorrectly spelled
vim spell check: zuw                  # (n) undo permanently mark word as incorrectly spelled
vim spell check: zW                   # (n) temporarily mark word as incorrectly spelled
vim spell check: zuW                  # (n) undo temporarily mark word as incorrectly spelled
vim spell check: [s ]s                # (n) go to previous and next spelling error
vim spell check: [S ]S                # (n) go to previous and next spelling error

vim terminal: :term                   # (c) start terminal emulator
vim terminal: <Ctrl-\><Ctrl-n>        # (i) leave terminal insert mode
vim terminal: i                       # (n) enter terminal insert mode

vim surround: ), }, ], >                                # (surround) not including spaces
vim surround: b, B, r, a                                # (surround) aliases for ), }, ], and > respectively
vim surround: (, {, [                                   # (surround) including spaces
vim surround: ", ', `                                   # (surround)
vim surround: f                                         # (surround) surrounding function call
vim surround: F                                         # (surround) surrounding function call with spaces inside
vim surround: ys{surround, object or motion}{surround}  # (n) (operator) add surrounds
vim surround: yss{surround}                             # (n) (operator) add surrounds to line, ignoring leading whitespace
vim surround: yS{surround, object or motion}{surround}  # (n) (operator) add surrounds on separate lines and indent
vim surround: ySS{surround, object or motion}{surround} # (n) (operator) add surrounds above and below current line and indent
vim surround: cs{surround, object or motion}{surround}  # (n) (operator) change surrounds
vim surround: css{surround}                             # (n) (operator) change surrounds for line
vim surround: ds{surround, object or motion}            # (n) (operator) delete surrounds
vim surround: dss{surround}                             # (n) (operator) delete surrounds from line
vim surround: S{surround}                               # (vl) (operator) adds surrounds on lines above and below
vim surround: S{surround}                               # (vb) (operator) adds surrounds to selected text on each line individually
vim surround: cs'<p>                                    # (n) change surrounding ' to <p></p>
vim surround: cst"                                      # (n) change surrounding tag to "
vim surround: ds"                                       # (n) delete surrounding "
vim surround: ysiw<em> or ysiwtem>                      # (n) add em tag around iw text object
vim surround: ysiwf{name}<cr>                           # (n) wrap iw text object in function call
vim surround: ysiwF{name}<cr>                           # (n) wrap iw text object in function call with space inside parentheses

vim-fzf: :Files                       # (c) search in all files
vim-fzf: :Files {path}                # (c) search in all files in {path}
vim-fzf: :GFiles                      # (c) search in git repository
vim-fzf: :GFiles?                     # (c) search all files in git directory
vim-fzf: :Buffers                     # (c) search open buffers
vim-fzf: :Colors                      # (c) search color schemes
vim-fzf: :Ag {pattern}                # (c) search using ag
vim-fzf: :Rg                          # (c) search using rg
vim-fzf: :Lines                       # (c) search lines in loaded buffers
vim-fzf: :BLines {query}              # (c) search lines in current buffer
vim-fzf: :Tags {query}                # (c) search tags in current project
vim-fzf: :BTags {query}               # (c) search tags in current buffer
vim-fzf: :Marks                       # (c) search marks
vim-fzf: :Windows                     # (c) search windows
vim-fzf: :Locate {pattern}            # (c) search locate command output
vim-fzf: :History                     # (c) search previously and currently opened files
vim-fzf: :History:                    # (c) search command history
vim-fzf: :History/                    # (c) search search history
vim-fzf: :Snippets                    # (c) search ultisnips snippets available in current buffer
vim-fzf: :Commits                     # (c) search git commits
vim-fzf: :BCommits                    # (c) search git commits for current buffer
vim-fzf: :{range}BCommits             # (c) search git commits for selected lines
vim-fzf: :Commands                    # (c) search commands
vim-fzf: :Maps                        # (c) search normal mode mappings
vim-fzf: :Helptags                    # (c) search help tags
vim-fzf: :Filetypes                   # (c) search filetypes
vim-fzf: {command}!                   # (c) use full screen window for search results
vim-fzf: <Leader>fh                   # (n) search recently used files
vim-fzf: <Leader>fg                   # (n) search filenames tracked by active git repository
vim-fzf: <Leader>fp                   # (n) search filenames in ~/projects
vim-fzf: <Leader>fn                   # (n) search notes directory with Ag
vim-fzf: <Leader>fm                   # (n) :Marks
vim-fzf: <Leader>fs                   # (n) :Sessions
vim-fzf: <Leader>fc                   # (n) search filenames in ~/.config
vim-fzf window: <C-t>                 # (n) open in new tab
vim-fzf window: <C-x>                 # (n) open in horizontal split
vim-fzf window: <C-v>                 # (n) open in vertical split

vim-sneak: s{char}{char}                  # (n) jump to next occurrence of the first {char}
vim-sneak: {count}s{char}{char}           # (n) jump to next occurrence of the first {char} within {count} lines
vim-sneak: S{char}{char}                  # (n) jump to previous occurrence of the first {char}
vim-sneak: {count}S{char}{char}           # (n) jump to previous occurrence of the first {char} within {count} lines
vim-sneak: s<CR>                          # (n) repeat last sneak search in forward direction
vim-sneak: S<CR>                          # (n) repeat last sneak search in backward direction
vim-sneak: {operator}z{char}{char}        # (n) apply operator forward to the next {char}{char}
vim-sneak: {count}{operator}z{char}{char} # (n) apply operator forward to {count}th {char}{char}
vim-sneak: {operator}Z{char}{char}        # (n) apply operator backward to the next {char}{char}
vim-sneak: {count}{operator}Z{char}{char} # (n) apply operator backward to {count}th {char}{char}

vim commentary: gc{motion}            # (n) toggle comments on lines in motion
vim commentary: gcc                   # (n) toggle comments on {count} lines
vim commentary: gc                    # (n) (object) group of commented lines
vim commentary: gcgc or gcu           # (n) toggle comments for group of commented lines
vim commentary: :[range]Commentary    # (c) toggle comments for lines in range

vim-sort-motion: gs{extra line motion} # (n) sort lines covered by motion
vim-sort-motion: gs{intra line motion} # (n) sort as comma separated list (e.g. arguments)
vim-sort-motion: gs                    # (v) sort visually selected text

splitjoin.vim: gS                      # (n) split single line into equivalent block version
splitjoin.vim: gJ                      # (n) join block into equivalent single line version

vim scalpel: <Lead>e                   # (n) populate command to substitute for current word

vim-titlecase: gz{motion}              # (n) capitalize the first character of each word
vim-titlecase: gz                      # (v) capitalize the first character of each visually selected word

vim-textobj-entire: ae                # (object) all lines in current buffer
vim-textobj-entire: ie                # (object) all lines in current buffer except outer whitespace lines
vim-textobj-line: al                  # (object) current line
vim-textobj-line: il                  # (object) current line except outer whitespace

vim-indent-object: ai                 # (object) indent block and line above
vim-indent-object: {count}ai          # (object) indent block n levels up
vim-indent-object: ii or iI           # (object) indent block only
vim-indent-object: iI                 # (object) indent block and lines above and below

vim-unimpaired: [a ]a                 # {motion} to previous and next file
vim-unimpaired: [A ]A                 # {motion} to first and last file
vim-unimpaired: [A ]A                 # {motion} to first and last file
vim-unimpaired: [b ]b                 # {motion} to previous and next buffer
vim-unimpaired: [B ]B                 # {motion} to first and last buffer
vim-unimpaired: [l ]l                 # {motion} to previous and next location
vim-unimpaired: [L ]L                 # {motion} to first and last location
vim-unimpaired: [<C-l> ]<C-l>         # {motion} to first location in previous and next file
vim-unimpaired: [q ]q                 # {motion} to previous and next location in quickfix list
vim-unimpaired: [Q ]Q                 # {motion} to first and last location in quickfix list
vim-unimpaired: [<C-q> ]<C-q>         # {motion} to quickfix location in previous and next file
vim-unimpaired: [t ]t                 # {motion} to previous and next tag
vim-unimpaired: [T ]T                 # {motion} to first and last tag
vim-unimpaired: [<C-t> ]<C-t>         # (n) preview previous and next tag
vim-unimpaired: [f ]f                 # {motion} to previous and next alphabetical file in directory
vim-unimpaired: [n ]n                 # {motion} to previous and next git conflict or hunk
vim-unimpaired: [<Space> ]<Space>     # (n) add {count} blank (empty) lines above and below cursor
vim-unimpaired: [e ]e                 # (n) (v) move current line or selected lines up by {count} lines
vim-unimpaired: [ob ]ob yob           # (n) on, off, & toggle background (dark is off, light is on)
vim-unimpaired: [oc ]oc yoc           # (n) on, off, & toggle cursorline
vim-unimpaired: [od ]od yod           # (n) on, off, & toggle diff (:diffthis & :diffoff)
vim-unimpaired: [oh ]oh yoh           # (n) on, off, & toggle search highlight (hlsearch)
vim-unimpaired: [oi ]oi yoi           # (n) on, off, & toggle ignorecase
vim-unimpaired: [ol ]ol yol           # (n) on, off, & toggle list
vim-unimpaired: [on ]on yon           # (n) on, off, & toggle number
vim-unimpaired: [or ]or yor           # (n) on, off, & toggle relative number
vim-unimpaired: [os ]os yos           # (n) on, off, & toggle spellcheck
vim-unimpaired: [ou ]ou you           # (n) on, off, & toggle cursorcolumn
vim-unimpaired: [ov ]ov yov           # (n) on, off, & toggle virtualedit
vim-unimpaired: [ow ]ow yow           # (n) on, off, & toggle wrap
vim-unimpaired: [ox ]ox yox           # (n) on, off, & toggle cursorline and cursorcolumn (cross)
vim-unimpaired custom: [of ]of yof    # (n) on, off, & toggle fold column in gutter
vim-unimpaired: [x{motion}            # (n) XML encode
vim-unimpaired: [xx                   # (n) XML encode current line
vim-unimpaired: ]x{motion}            # (n) XML decode
vim-unimpaired: ]xx                   # (n) XML decode current line
vim-unimpaired: [u{motion}            # (n) URL encode
vim-unimpaired: [uu                   # (n) URL encode current line
vim-unimpaired: ]u{motion}            # (n) URL decode
vim-unimpaired: ]uu                   # (n) URL decode current line
vim-unimpaired: [y{motion}            # (n) C string encode
vim-unimpaired: [yy                   # (n) C string encode current line
vim-unimpaired: ]y{motion}            # (n) C string decode
vim-unimpaired: ]yy                   # (n) C string decode current line

vim-plug: :PlugInstall                # (c) install plugins
vim-plug: :PlugClean                  # (c) remove unlisted plugins
vim-plug: :PlugClean!                 # (c) remove unlisted plugins without prompt
vim-plug: :PlugUpdate                 # (c) update all plugins
vim-plug: :PlugUpdate [name ...]      # (c) update specific plugins
vim-plug: :PlugUpgrade                # (c) update vim-plug itself
vim-plug: :PlugStatus                 # (c) check status of plugins
vim-plug: :PlugDiff                   # (c) show changes from last update and pending changes
vim-plug: :PlugSnapshot [output path] # (c) generate script for restoring current plugins

vim custom: :Reload                   # (c) save buffer, source current file, :PlugInstall

vim-cmp: :CmpStatus                   # (c) show status of nvim-cmp
vim-cmp: <Ctrl-h>                     # (i) (custom) move to previous location in snippet
vim-cmp: <Ctrl-j>                     # (i) (custom) move cursor down in menu
vim-cmp: <Ctrl-k>                     # (i) (custom) move cursor up in menu
vim-cmp: <Ctrl-l>                     # (i) (custom) move to next location in snippet
vim-cmp: <Ctrl-Space>                 # (n) (custom) manual completion
vim-cmp: <Ctrl-Space>                 # (i) (custom) choose menu item
vim-cmp: <Ctrl-q>                     # (i) (custom) close completion menu

vim-snippets python: #!               # (i) python3 shebang
vim-snippets python: imp              # (i) import statement
vim-snippets python: uni              # (i) unicode dunder method
vim-snippets python: from             # (i) import from statement
vim-snippets python: docs             # (i) doc string for file or module
vim-snippets python: wh               # (i) while loop
vim-snippets python: dowh             # (i) do while true loop
vim-snippets python: with             # (i) context manager block
vim-snippets python: awith            # (i) async context manager block
vim-snippets python: cl               # (i) class definition with inheritance, doc string, and init method
vim-snippets python: cla              # (i) class definition with doc string
vim-snippets python: clai             # (i) class definition with doc string and init method
vim-snippets python: def              # (i) function definition with doc string
vim-snippets python: deff             # (i) function definition with no doc string
vim-snippets python: adef             # (i) async function definition with doc string
vim-snippets python: adeff            # (i) async function definition with no doc string
vim-snippets python: defi             # (i) init method definition
vim-snippets python: defm             # (i) method definition
vim-snippets python: adefm            # (i) async method definition
vim-snippets python: property         # (i) property definition with decorator and setter method
vim-snippets python: if               # (i) if statement block definition
vim-snippets python: el               # (i) else statement block definition
vim-snippets python: ei               # (i) elif statement block definition
vim-snippets python: for              # (i) for statement block definition
vim-snippets python: cutf8            # (i) encoding shebang for utf8
vim-snippets python: clatin1          # (i) encoding shebang for latin1
vim-snippets python: cascii           # (i) encoding shebang for ascii
vim-snippets python: ld               # (i) lambda function definition
vim-snippets python: ret              # (i) return statement
vim-snippets python: .                # (i) "self."
vim-snippets python: sa               # (i) self.attribute definition
vim-snippets python: try              # (i) try-except statement definition
vim-snippets python: trye             # (i) try-except-else statement definition
vim-snippets python: tryf             # (i) try-except-finally statement definition
vim-snippets python: tryef            # (i) try-except-else-finally statement definition
vim-snippets python: ifmain           # (i) if __name__ == "__main__":
vim-snippets python: _                # (i) ipython magic command
vim-snippets python: "                # (i) doc string
vim-snippets python: "=               # (i) self.assertEqual
vim-snippets python: test             # (i) test function block definition
vim-snippets python: tgwt             # (i) test given when then
vim-snippets python: fut              # (i) from __future__ import
vim-snippets python: kwg              # (i) set attribute from kwargs dictionary
vim-snippets python: lkwg             # (i) set variable from kwargs dictionary
vim-snippets python: args             # (i) *args
vim-snippets python: kwargs           # (i) **kwargs
vim-snippets python: akw              # (i) *args, **kwargs
vim-snippets python: lcp              # (i) list comprehension
vim-snippets python: dcp              # (i) dictionary comprehension
vim-snippets python: scp              # (i) set comprehension
vim-snippets python: contain          # (i) methods for emulating a container type
vim-snippets python: context          # (i) context manager methods
vim-snippets python: attr             # (i) methods for controlling attribute access
vim-snippets python: desc             # (i) methods implementing descriptors
vim-snippets python: cmp              # (i) methods implementing rich comparison
vim-snippets python: repr             # (i) methods implenting string representation
vim-snippets python: numeric          # (i) methods for emulating a numeric type

vim-snippets django template: %                 # (i) tag
vim-snippets django template: %%                # (i) start and end tags
vim-snippets django template: {                 # (i) double braces tag
vim-snippets django template: autoescape        # (i) autoescape start and end tags
vim-snippets django template: block             # (i) block start and end tags
vim-snippets django template: #                 # (i) single pound tag
vim-snippets django template: comment           # (i) comment start and end tags
vim-snippets django template: cycle             # (i) cycle tag
vim-snippets django template: debug             # (i) debug tag
vim-snippets django template: extends           # (i) extends tag
vim-snippets django template: filter            # (i) filter block start and end tags
vim-snippets django template: firstof           # (i) firstof tag
vim-snippets django template: for               # (i) for block start and end tags
vim-snippets django template: empty             # (i) empty tag
vim-snippets django template: if                # (i) if block start and end tags
vim-snippets django template: el                # (i) else tag
vim-snippets django template: eif               # (i) elif tag
vim-snippets django template: ifchanged         # (i) ifchanged start and end tags
vim-snippets django template: ifequal           # (i) ifequal start and end tags
vim-snippets django template: ifnotequal        # (i) ifnotequal start and end tags
vim-snippets django template: include           # (i) include tag
vim-snippets django template: load              # (i) load tag
vim-snippets django template: now               # (i) now tag
vim-snippets django template: regroup           # (i) regroup tag
vim-snippets django template: spaceless         # (i) spaceless tag
vim-snippets django template: ssi               # (i) ssi tag
vim-snippets django template: trans             # (i) trans
vim-snippets django template: url               # (i) url
vim-snippets django template: widthratio        # (i) widthratio tag
vim-snippets django template: with              # (i) with block start and end tags
vim-snippets django template: add               # (i) filter
vim-snippets django template: center            # (i) filter
vim-snippets django template: cut               # (i) filter
vim-snippets django template: date              # (i) filter
vim-snippets django template: default           # (i) filter
vim-snippets django template: defaultifnone     # (i) filter
vim-snippets django template: dictsort          # (i) filter
vim-snippets django template: dictsortrev       # (i) filter
vim-snippets django template: divisibleby       # (i) filter
vim-snippets django template: floatformat       # (i) filter
vim-snippets django template: getdigit          # (i) filter
vim-snippets django template: join              # (i) filter
vim-snippets django template: lengthis          # (i) filter
vim-snippets django template: pluralize         # (i) filter
vim-snippets django template: removetags        # (i) filter
vim-snippets django template: slice             # (i) filter
vim-snippets django template: stringformat      # (i) filter
vim-snippets django template: time              # (i) filter
vim-snippets django template: truncatewords     # (i) filter
vim-snippets django template: truncatewordshtml # (i) filter
vim-snippets django template: urlizetrunc       # (i) filter

vim-snippets django template: wordwrap          # (i) filter
vim-snippets django: auto                 # (i) model field
vim-snippets django: bigint               # (i) model field
vim-snippets django: binary               # (i) model field
vim-snippets django: bool                 # (i) model field
vim-snippets django: char                 # (i) model field
vim-snippets django: comma                # (i) model field
vim-snippets django: date                 # (i) model field
vim-snippets django: datetime             # (i) model field
vim-snippets django: decimal              # (i) model field
vim-snippets django: email                # (i) model field
vim-snippets django: file                 # (i) model field
vim-snippets django: filepath             # (i) model field
vim-snippets django: float                # (i) model field
vim-snippets django: image                # (i) model field
vim-snippets django: int                  # (i) model field
vim-snippets django: ip                   # (i) model field
vim-snippets django: nullbool             # (i) model field
vim-snippets django: posint               # (i) model field
vim-snippets django: possmallint          # (i) model field
vim-snippets django: slug                 # (i) model field
vim-snippets django: smallint             # (i) model field
vim-snippets django: text                 # (i) model field
vim-snippets django: time                 # (i) model field
vim-snippets django: url                  # (i) model field
vim-snippets django: xml                  # (i) model field
vim-snippets django: fk                   # (i) foreign key model field
vim-snippets django: m2m                  # (i) many to many model field
vim-snippets django: o2o                  # (i) one to one model field
vim-snippets django: form                 # (i) forms.Form definition
vim-snippets django: model                # (i) models.Model definition
vim-snippets django: modeladmin           # (i) admin.ModelAdmin
vim-snippets django: tabularinline        # (i) admin.TabularInline
vim-snippets django: stackedinline        # (i) admin.StackedInline
vim-snippets django: r2r                  # (i) render to response

vim-snippets snippet: snip                # (i) snippet
vim-snippets snippet: v                   # (i) {VISUAL}
vim-snippets snippet: $                   # (i) ${ : }

vim-snippets jinja: %                     # (i) tag
vim-snippets jinja: %%                    # (i) start and end tags
vim-snippets jinja: {                     # (i) double brace tag
vim-snippets jinja: autoescape            # (i) autoescape start and end tag
vim-snippets jinja: block                 # (i) block start and end tags
vim-snippets jinja: #                     # (i) single # tag
vim-snippets jinja: comment               # (i) comment start and end tag
vim-snippets jinja: cycle                 # (i) cycle tag
vim-snippets jinja: debug                 # (i) debug tag
vim-snippets jinja: extends               # (i) extends tag
vim-snippets jinja: filter                # (i) filter start and end tag
vim-snippets jinja: firstof               # (i) firstof tag
vim-snippets jinja: for                   # (i) for block start and end tag
vim-snippets jinja: empty                 # (i) empty tag
vim-snippets jinja: if                    # (i) if block start and end tag
vim-snippets jinja: el                    # (i) else tag
vim-snippets jinja: eif                   # (i) elif tag
vim-snippets jinja: ifchanged             # (i) ifchanged start and end tag
vim-snippets jinja: ifequal               # (i) ifequal start and end tag
vim-snippets jinja: ifnotequal            # (i) ifnotequal start and end tag
vim-snippets jinja: include               # (i) include tag
vim-snippets jinja: load                  # (i) load tag
vim-snippets jinja: now                   # (i) now tag
vim-snippets jinja: regroup               # (i) regroup tag
vim-snippets jinja: spaceless             # (i) spaceless start and end tag
vim-snippets jinja: ssi                   # (i) ssi tag
vim-snippets jinja: trans                 # (i) trans start and end tag
vim-snippets jinja: url                   # (i) url tag
vim-snippets jinja: widthratio            # (i) widthratio tag
vim-snippets jinja: with                  # (i) with block start and end tag
vim-snippets jinja: add                   # (i) filter
vim-snippets jinja: center                # (i) filter
vim-snippets jinja: cut                   # (i) filter
vim-snippets jinja: date                  # (i) filter
vim-snippets jinja: default               # (i) filter
vim-snippets jinja: defaultifnone         # (i) filter
vim-snippets jinja: dictsort              # (i) filter
vim-snippets jinja: dictsortrev           # (i) filter
vim-snippets jinja: divisibleby           # (i) filter
vim-snippets jinja: floatformat           # (i) filter
vim-snippets jinja: getdigit              # (i) filter
vim-snippets jinja: join                  # (i) filter
vim-snippets jinja: lenthis               # (i) filter
vim-snippets jinja: pluralize             # (i) filter
vim-snippets jinja: removetags            # (i) filter
vim-snippets jinja: slice                 # (i) filter
vim-snippets jinja: stringformat          # (i) filter
vim-snippets jinja: time                  # (i) filter
vim-snippets jinja: truncatewords         # (i) filter
vim-snippets jinja: truncatewordshtml     # (i) filter
vim-snippets jinja: urlizetrunc           # (i) filter
vim-snippets jinja: wordwrap              # (i) filter

fzf-session.vim: :Session {name}                   # (c) create session
fzf-session.vim: :SLoad {name}                     # (c) load session
fzf-session.vim: :SDelete {name}                   # (c) delete session
fzf-session.vim: :SQuit                            # (c) stop tracking current active session and close buffers
fzf-session.vim: :SList                            # (c) list all available sessions
fzf-session.vim: :Sessions                         # (c) search available sessions


vim codi: :Codi                       # (c) start codi for current buffer
vim codi: :Codi!                      # (c) stop codi for current buffer
vim codi: :Codi!!                     # (c) toggle codi for current buffer
vim codi: <Lead>c                     # (n) toggle codi for current buffer

vim loupe: <Lead>n                    # (n) turn off search highlighting

vim-fugitive stage: s                  # stage file or hunk under cursor
vim-fugitive stage: u                  # unstage the file or hunk under the cursor
vim-fugitive stage: -                  # stage or unstage the file or hunk under the cursor
vim-fugitive stage: U                  # unstage everything
vim-fugitive stage: x                  # discard change under cursor
vim-fugitive stage: =                  # toggle inline diff of file under cursor
vim-fugitive stage: >                  # insert inline diff of file under cursor
vim-fugitive stage: <                  # remove inline diff of file under cursor
vim-fugitive stage: gI                 # open .git/info/exclude in a split and add file under cursor
vim-fugitive stage: {count}gI          # open .gitignore
vim-fugitive stage: I or P             # prompt to stage hunks in file (git add --patch)
vim-fugitive diff: dd                    # open a diff with split in default direction
vim-fugitive diff: dv                    # open a diff with vertical split
vim-fugitive diff: ds or dh              # open a diff with horizontal split
vim-fugitive diff: dq                    # close all but one diff buffer, and turn off diff mode

vim-fugitive navigation: <CR>            # open file under cursor
vim-fugitive navigation: o               # open file under cursor in new split
vim-fugitive navigation: gO              # open file under cursor in new vertical split
vim-fugitive navigation: O               # open file under cursor in new tab
vim-fugitive navigation: p               # open file under cursor in preview window (try 1p in status buffer)
vim-fugitive navigation: -               # open current file in {count}th first ancestor
vim-fugitive navigation: P               # open current file in {count}th parent
vim-fugitive navigation: C               # open the commit containing the current file
vim-fugitive navigation: ( or )          # jump to previous or next file, hunk, or revision
vim-fugitive navigation: ]c or [c        # jump to next or previous {count} hunk
vim-fugitive navigation: [/ or [m        # jump to previous file, collapsing inline diffs automatically
vim-fugitive navigation: ]/ or ]m        # jump to next file, collapsing inline diffs
vim-fugitive navigation: i               # jump to next file or hunk expanding inline diffs
vim-fugitive navigation: ]] or [[        # jump to next or previous {count} section
vim-fugitive navigation: []              # jump {count} section ends backward
vim-fugitive navigation: ][              # jump {count} section ends forward
vim-fugitive navigation: *               # search forward from first column of + or - line for corresponding line
vim-fugitive navigation: #               # search backward from first column of + or - line for corresponding line
vim-fugitive navigation: gu              # jump to file in the untracked or unstaged section
vim-fugitive navigation: gU              # jump to file in the unstaged section
vim-fugitive navigation: gs              # jump to file in the staged section
vim-fugitive navigation: gp              # jump to file in the unpushed section
vim-fugitive navigation: gP              # jump to file in the unpulled section
vim-fugitive navigation: gr              # jump to file in the rebasing section
vim-fugitive navigation: gi              # open .git/info/exclude in a split
vim-fugitive navigation: {count}gi       # open .gitignore in a split

vim-fugitive commit: cc                  # create commit
vim-fugitive commit: ca                  # amend last commit and edit message
vim-fugitive commit: ce                  # amend last commit without editing the message
vim-fugitive commit: cw                  # reword the last commit message
vim-fugitive commit: cvc                 # create commit with -v (verbose)
vim-fugitive commit: cva                 # amend the last commit with -v (verbose)
vim-fugitive commit: cf                  # create a fixup commit for the commit under the cursor
vim-fugitive commit: cF                  # create a fixup commit for the commit under the cursor and immediately rebase it
vim-fugitive commit: cs                  # create a squash commit for the commit under the cursor
vim-fugitive commit: cS                  # create a squash commit for the commit under the cursor and immediately rebase it
vim-fugitive commit: cA                  # create a squash commit for the commit under the cursor and edit the message
vim-fugitive commit: c<Space>            # populate command line with ":Git commit "
vim-fugitive commit: crc                 # revert commit under cursor (commiting changes)
vim-fugitive commit: crn                 # revert commit under cursor in index and work tree but don't commit changes
vim-fugitive commit: cr<Space>           # populate command line with ":Git revert "
vim-fugitive commit: cm<Space>           # populate command line with ":Git merge "

vim-fugitive checkout/branch: coo        # checkout commit under cursor
vim-fugitive checkout/branch: cb<Space>  # populate command line with ":Git branch "
vim-fugitive checkout/branch: co<Space>  # populate command line with ":Git checkout "
vim-fugitive checkout/branch: cb? or co? # show checkout/branch help

vim-fugitive stash: czz                  # push stash
vim-fugitive stash: 1czz                 # push stash --include-untracked
vim-fugitive stash: 2czz                 # push stash --all
vim-fugitive stash: czw                  # push stash of worktree (like czz with --keep-index)
vim-fugitive stash: czA                  # apply topmost stash or stash@{count}
vim-fugitive stash: cza                  # apply topmost stash or stash@{count}, preserving the index
vim-fugitive stash: czP                  # pop typmost stash or stash@{count}
vim-fugitive stash: czp                  # pop typmost stash or stash@{count}, preserving the index
vim-fugitive stash: cz<Space>            # populate command line with ":Git stash "

vim-fugitive rebase: ri or u             # interactive rebase using ancester of commit under cursor as upstream
vim-fugitive rebase: rf                  # autosquash rebase without editing todo list, use ancestor of commit under cursor as upstream
vim-fugitive rebase: ru                  # interactive rebase against @{upstream}
vim-fugitive rebase: rp                  # interactive rebase against @{push}
vim-fugitive rebase: rr                  # continue the current rebase
vim-fugitive rebase: rs                  # skip the current commit and continue the current rebase
vim-fugitive rebase: ra                  # abort the current rebase
vim-fugitive rebase: re                  # edit the current rebase todo list
vim-fugitive rebase: rw                  # interactive rebase with the commit under the cursor set to `reword`
vim-fugitive rebase: rm                  # interactive rebase with the commit under the cursor set to `edit`
vim-fugitive rebase: rd                  # interactive rebase with the commit under the cursor set to `drop`
vim-fugitive rebase: r<Space>            # populate command line with ":Git rebase "

vim-fugitive blame: A                    # resize to end of author column
vim-fugitive blame: C                    # resize to end of commit column
vim-fugitive blame: D                    # resize to end of date/time column
vim-fugitive blame: gq                   # close blame
vim-fugitive blame: <CR>                 # close blame and jump to patch that added line (or to blob for boundary commit)
vim-fugitive blame: o                    # jump to patch or blob in horizontal split
vim-fugitive blame: O                    # jump to patch or blob in new tab
vim-fugitive blame: p                    # jump to patch or blob in preview window
vim-fugitive blame: -                    # reblame at commit
vim-fugitive blame: ~                    # reblame at {count}th first grandparent
vim-fugitive blame: P                    # reblame at {count}th parent (like HEAD^{count})

vim-fugitive: :G                         # (c) open status buffer
vim-fugitive: gq                         # close status buffer
vim-fugitive: .                          # populate command line with the file under the cursor
vim-fugitive: <Ctrl-r><Ctrl-g>           # (c) recall path to current fugitive object
vim-fugitive: "{register}y<Ctrl-g>       # yank path to current fugitive object

vim-fugitive object: @                   # (c) commit referenced by @ aka HEAD
vim-fugitive object: main                # (c) commit referenced by main
vim-fugitive object: main^               # (c) parent of commit referenced by main
vim-fugitive object: main...other        # (c) merge base of main and other
vim-fugitive object: main:               # (c) tree referenced by main
vim-fugitive object: ./main              # (c) file named main in working directory
vim-fugitive object: :(top)main          # (c) file named main in the work tree
vim-fugitive object: Makefile            # (c) file named Makefile in the work tree
vim-fugitive object: @^:Makefile         # (c) file named Makefile in the parent of HEAD
vim-fugitive object: :Makefile           # (c) file named Makefile in the index (writeable)
vim-fugitive object: @~2:%               # (c) current file in the grandparent of head
vim-fugitive object: :%                  # (c) current file in the index
vim-fugitive object: :1:%                # (c) current file's common ancestor during a conflict
vim-fugitive object: :2:#                # (c) alternate file in the target branch during a conflict
vim-fugitive object: :3:#5               # (c) file from buffer #5 in the merged branch during a conflict
vim-fugitive object: !                   # (c) commit owning the current file
vim-fugitive object: !:Makefile          # (c) file named Makefile in the commit owning the current file
vim-fugitive object: !3^2                # (c) second parent of the commit owning buffer #3
vim-fugitive object: .git/config         # (c) repo config file
vim-fugitive object: :                   # (c) fugitive summary buffer
vim-fugitive object: -                   # (c) temp file containing the last :Git invocations output
vim-fugitive object: <cfile>             # (c) file or commit under the cursor

vim-fugitive: <Lead>gs                   # open status buffer (:Git or :G)
vim-fugitive: <Lead>gb                   # (n) open :Git blame for all lines
vim-fugitive: <Lead>gb                   # (v) open :Git blame for selected lines
vim-fugitive: <Lead>gpo                  # (n) run :G push origin main
vim-fugitive: :GEdit                     # (c) return to work tree version of file
vim-fugitive: :GMove                     # (c) move file
vim-fugitive: :GRename                   # (c) move file relative to containing directory
vim-fugitive: :GDelete                   # (c) delete file and delete empty buffer
vim-fugitive: :GRemove                   # (c) delete file and keep empty buffer
vim-fugitive: gb                         # (n) open current file on github
vim-fugitive: gb                         # (v) open current file on github with lines selected
vim-fugitive: <Ctrl-x><Ctrl-o>           # starts completion of github issue and pull request numbers and usernames

vim-gitgutter: <Lead>hp               # preview hunk under cursor
vim-gitgutter: <Lead>hs               # stage hunk under cursor
vim-gitgutter: <Lead>hu               # undo the hunk under the cursor
vim-gitgutter: ]c or [c               # jump to the next or previous {count} hunk
vim-gitgutter: ic                     # (object) current hunk's lines
vim-gitgutter: ac                     # (object) current hunk's lines and trailing blank lines

vim gv: :GV                           # (c) open commit browser
vim gv: <Lead>gv                      # (n) open commit browser
vim gv: {range}:GV                    # (c) open commit browser with changes affecting selected lines
vim gv: :GV!                          # (c) open commit browser with commits affecting current file
vim gv: {range}:GV!                   # (c) open commit browser with commits affecting selected lines
vim gv: :GV?                          # (c) fills location list with revisions of current file
vim gv commit browser: o or <CR>      # (n) display contents of diff on current line
vim gv commit browser: o or <CR>      # (v) display diff between selected commits
vim gv commit browser: O              # (n) display contents of diff on current line in new tab
vim gv commit browser: O              # (v) display contents of diff between selected commits in new tab
vim gv commit browser: gb             # open commit on github
vim gv commit browser: [[ ]]          # move between commits
vim gv commit browser: .              # populate command line with ":Git {cursor} {commit SHA}"
vim gv commit browser: q or gq        # close

vim-eunuch: :Delete                   # unload buffer, delete from buffer list, delete from disk (fails if file was changed)
vim-eunuch: :Delete!                  # unload buffer, delete from buffer list, delete from disk
vim-eunuch: :Unlink or :Remove        # delete file from disk, reload buffer
vim-eunuch: :Unlink! or :Remove!      # delete file from disk, reload buffer, discard unsaved changes
vim-eunuch: :Move {file}              # save as new name and delete old file (fails if file exists)
vim-eunuch: :Move! {file}             # save as new name and delete old file
vim-eunuch: :Rename {file}            # save as new name relative to containing directory and delete old file (fails if file exists)
vim-eunuch: :Rename! {file}           # save as new name relative to containing directory and delete old file
vim-eunuch: :Chmod {Mode}             # change permissions of current file
vim-eunuch: :Mkdir                    # create current buffer's directory if it doesn't exist
vim-eunuch: :Mkdir {dir}              # create directory
vim-eunuch: :Mkdir!                   # create current buffer's directory (and intermediate dirs) if it doesn't exist
vim-eunuch: :Mkdir! {dir}             # create directory and intermediate dirs
vim-eunuch: :Cfind {args}             # run find and load results into quickfix list, jump to first result
vim-eunuch: :Cfind! {args}            # run find and load results into quickfix list, don't jump to first result
vim-eunuch: :Lfind {args}             # run find and load results into location list, jump to first result
vim-eunuch: :Lfind! {args}            # run find and load results into location list, don't jump to first result
vim-eunuch: :Clocate {args}           # run locate and load results into quickfix list, jump to first result
vim-eunuch: :Clocate! {args}          # run locate and load results into quickfix list, don't jump to first result
vim-eunuch: :Llocate {args}           # run locate and load results into location list, jump to first result
vim-eunuch: :Llocate! {args}          # run locate and load results into location list, don't jump to first result
vim-eunuch: :SudoEdit                 # edit (open) current file using sudo
vim-eunuch: :SudoEdit {file}          # edit (open) {file} using sudo
vim-eunuch: :SudoWrite                # write current file to disk using sudo
vim-eunuch: :Wall or :W               # write all windows, even unchanged

switch.vim: <Lead>s                   # invoke :Switch

vim undotree: <Lead>u                 # toggle undotree
vim undotree: <CR>                    # change buffer to state of highlighted line
vim undotree: < or >                  # move to previous or next saved state
vim undotree: J or K                  # move to previous or next undo state
vim undotree: D                       # toggle diff panel
vim undotree: T                       # toggle relative timestamp
vim undotree: C                       # clear undo history (with confirmation)
vim undotree: <Tab>                   # set focus back to the editor
vim undotree: q                       # close undotree panel
vim undotree: ?                       # toggle quick help

vim-startuptime: :StartupTime         # (c) run startuptime plugin
vim-startuptime: K                    # (n) show additional information about line
vim-startuptime: gf                   # (n) load corresponding file in new split

vim netrw: :Explore                   # (c) open netrw in current window
vim netrw: :Explore!                  # (c) open netrw, vertical split if current file has changed
vim netrw: :Hexplore                  # (c) open netrw in bottom half
vim netrw: :Hexplore!                 # (c) open netrw in top half
vim netrw: :Vexplore                  # (c) open netrw in left half
vim netrw: :Vexplore!                 # (c) open netrw in right half
vim netrw: :Sexplore                  # (c) open netrw, horizontal split, directory in upper window
vim netrw: :Sexplore!                 # (c) open netrw, horizontal split, directory in lower window
vim netrw: :Texplore                  # (c) open netrw in new tab
vim netrw: :Lexplore                  # (c) open netrw, vertical split, open file in window command was called from
vim netrw: <CR>                       # (n) open directory or file
vim netrw: -                          # (n) go to parent directory
vim netrw: u                          # (n) go back to previous directory
vim netrw: %                          # (n) create empty buffer in directory
vim netrw: R                          # (n) rename file
vim netrw: mt                         # (n) assign target directory used by move and copy
vim netrw: mf                         # (n) marks a file or directory
vim netrw: mc                         # (n) copy marked files to target directory
vim netrw: mm                         # (n) move marked files to target directory
vim netrw: mx                         # (n) runs external command on marked files
vim netrw: D                          # (n) delete file or empty directory
vim netrw: mx rm -r                   # (n) delete directory recursively
vim netrw: d                          # (n) create a directory
vim netrw: gh                         # (n) toggle hidden files
vim netrw: mb                         # (n) make a bookmark
vim netrw: gb                         # (n) go to most recent bookmark
vim netrw: p                          # (n) open preview window
vim netrw: <Lead>dd                   # (n) open current file's directory with netrw
vim netrw: <Lead>dh                   # (n) open home directory with netrw
vim netrw: <Lead>dp                   # (n) open projects directory with netrw
vim netrw: <Ctrl-wz>                  # (n) close preview window
vim netrw vinegar: I                  # (n) toggle information at top of screen
vim netrw vinegar: -                  # (n) open buffer location in netrw
vim netrw vinegar: .                  # (n) populate command with filename under cursor
vim netrw vinegar: y.                 # (n) yank {count} absolute filenames under cursor and below
vim netrw vinegar: ~                  # (n) go to the home directory
vim netrw vinegar: <Ctrl-^>           # (n) return to previous location (previous buffer)

qtile window: <Super-{hjkl}>          # move focus
qtile window: <Super-Shift-{hjkl}>    # move window left
qtile window: <Super-Ctrl-{hjkl}>     # grow window left
qtile window: <Super-n>               # reset all window sizes
qtile window: <Super-Shift-Enter>     # toggle between split and unsplit sides of stack
qtile window: <Super-Tab>             # toggle between layouts
qtile window: <Super-{1-9}>           # switch to group #
qtile window: <Super-Shift-{1-9}>     # move focused window and switch to group #
qtile program: <Super-Enter>          # launch terminal
qtile program: <Super-r>              # launch rofi
qtile program: <Super-b>              # launch firefox
qtile program: <Super-t>              # launch thunderbird
qtile program: <Super-f>              # launch ranger
qtile program: <Super-Shift-Enter>    # launch vim
qtile program: <Super-w>              # kill focused window
qtile: <Super-Ctrl-r>                 # restart qtile
qtile: <Super-Ctrl-q>                 # shutdown qtile

kitty: <C-S-h>                        # opens contents of terminal in text editor

ranger bookmarks: m - letter          # create bookmark
ranger bookmarks: um - letter         # delete bookmark
ranger bookmarks: ' or `              # go to a bookmark
ranger bookmarks: gh                  # go to home
ranger tabs: C-n                      # create new tab
ranger tabs: C-w                      # close current tab
ranger tabs: tab                      # next tab
ranger tabs: <Shift-Tab>              # previous tab
ranger tabs: <Alt-{1-9}>              # goto / create tab #
ranger movement: k                    # up
ranger movement: j                    # down
ranger movement: h                    # parent directory
ranger movement: l                    # subdirectory
ranger movement: gg                   # go to top of list
ranger movement: G                    # go to bottom of list
ranger movement: J                    # half page down
ranger movement: K                    # half page up
ranger movement: H                    # history Back
ranger movement: L                    # history Forward
ranger files: <CR>                    # open
ranger files: r                       # open file with
ranger files: z                       # toggle settings
ranger files: o                       # change sort order
ranger files: zh                      # view hidden files
ranger files: cw                      # rename current file
ranger files: yy                      # yank / copy
ranger files: dd                      # cut
ranger files: pp                      # paste
ranger files: /                       # search for files :search
ranger files: n                       # next match
ranger files: N                       # prev match
ranger files: <del>                   # delete
ranger: 1l                            # unzip selected file (uncompress)
ranger commands: :                    # execute Range Command
ranger commands: :mkdir [dir_name]    # make new directory
ranger commands: !                    # execute Shell Command
ranger commands: chmod                # change file Permissions
ranger commands: du                   # disk Usage Current Directory
ranger subst: %f                      # substitute highlighted file
ranger subst: %d                      # substitute current directory
ranger subst: %s                      # substitute currently selected files
ranger subst: %t                      # substitute currently tagged files
ranger subst: :bulkrename %s          # example for substitution

firefox current pag: F6               # move to the next frame
firefox current pag: Shift + F6       # move to the prev frame
firefox edit: <Ctrl+Backspace>        # delete word to the left
firefox edit: Ctrl + Del              # delete word to the right
firefox edit: Ctrl + ←                # go one word to the left
firefox edit: Ctrl + →                # go one word to the right
firefox edit: Ctrl + Home             # go to beginning of text
firefox edit: Ctrl + End              # go to end of text
firefox search: Ctrl + F                       # find
firefox search: F3 Ctrl + G                    # find again
firefox search: Shift + F3 Ctrl + Shift + G    # find previous
firefox search: '                              # quick find within link-text only
firefox search: /                              # quick find
firefox search: Esc                            # close the find or quick find bar if focused
firefox search: Alt + ↓↑                       # switch search engine while writing in address bar
firefox search: Ctrl + K Ctrl + J              # focus address bar for web search
firefox search: Ctrl + K Ctrl + J              # focus search bar - if search bar is shown
firefox search: Ctrl + ↓ Ctrl + ↑              # change the default search engine if in the search bar
firefox search: Alt + ↓ Alt + ↑ F4             # View menu to switch or manage search engines if search bar is focused
firefox tabs: Ctrl + W Ctrl + F4              # Close Tab - except for Pinned Tabs
firefox tabs: Ctrl + Shift + W Alt + F4       # Close Window
firefox tabs: Ctrl + Tab                      # Cycle through Tabs in Recently Used Order -if enabled in Preferences
firefox tabs: Ctrl + Q                        # Quit
firefox tabs: Ctrl+Page Up, Ctrl+Shift+Tab    # Go one Tab to the Left
firefox tabs: Alt + 1                         # to 8 Go to Tab 1 to 8
firefox tabs: Alt + 9                         # Go to Last Tab
firefox tabs: Ctrl + Shift + Page Up          # Move Tab Left
firefox tabs: Ctrl + Shift + Page Down        # Move Tab Right
firefox tabs: Ctrl + Shift + Home             # Move Tab to start - requires the currently selected tab to be "in focus" for instance, by hitting Alt + D to focus the address bar, and then Shift + Tab until you reach the browser tab bar.
firefox tabs: Ctrl + Shift + End              # Move Tab to end - requires the currently selected tab to be "in focus" for instance, by hitting Alt + D to focus the address bar, and then Shift + Tab until you reach the browser tab bar.
firefox tabs: Ctrl + M                        # Mute/Unmute Audio
firefox tabs: Ctrl + T                        # New Tab
firefox tabs: Ctrl + N                        # New Window
firefox tabs: Ctrl + Shift + P                # New Private Window
firefox tabs: Alt + Shift + Enter             # Open Address or Search in New Background Tab - from address bar
firefox tabs: Alt + Enter                     # Open Address or Search in New Foreground Tab - from address bar or Search bar
firefox tabs: Shift + Enter                   # Open Address or Search in New Window - from address bar or the Search field on the New Tab page
firefox tabs: Ctrl + Enter                    # Open Search in New Background Tab - from the Search field on the New Tab page. (see note, below)
firefox tabs: Ctrl + Shift + Enter            # Open Search in New Foreground Tab - from the Search field on the New Tab page. Note: The Foreground and Background Tab shortcuts are switched if the setting When you open a link in a new tab, switch to it immediately is enabled in Preferences
firefox tabs: Enter                           # Open Focused Bookmark or Link in Current Tab
firefox tabs: Ctrl + Enter                    # Open Focused Bookmark in New Foreground Tab
firefox tabs: Ctrl + Shift + Enter            # Open Focused Bookmark in New Background Tab
firefox tabs: Ctrl + Enter                    # Open Focused Link in New Background Tab (see note, below)
firefox tabs: Ctrl + Shift + Enter            # Open Focused Link in New Foreground Tab Note: The Foreground and Background Tab shortcuts are switched if the setting When you open a link in a new tab, switch to it immediately is enabled in Preferences
firefox tabs: Shift + Enter                   # Open Focused Bookmark or Link in New Window
firefox tabs: Ctrl + Shift + T                # Undo Close Tab
firefox tabs: Ctrl + Shift + N                # Undo Close Window
firefox tabs: Ctrl + Shift + X                # Moves the URL left or right (if cursor is in the address bar)
firefox history: Ctrl + H                     # History sidebar
firefox history: Ctrl + Shift + H             # Library window (History)
firefox history:  Ctrl + Shift + Del          # Clear Recent History
firefox marks: Ctrl + D                       # Bookmark This Page
firefox marks: Ctrl + B                       # Bookmarks sidebar
firefox marks: Ctrl + Shift + O               # Library window (Bookmarks)
firefox tools: Ctrl + Shift + Y               # Downloads
firefox tools: Ctrl + Shift + A               # Add-ons
firefox tools: F12, Ctrl + Shift + I          # Toggle Developer Tools
firefox tools: Ctrl + Shift + K               # Web Console
firefox tools: Ctrl + Shift + C               # Inspector
firefox tools: Ctrl + Shift + S               # Debugger
firefox tools: Shift + F7                     # Style Editor
firefox tools: Shift + F5                     # Profiler
firefox tools: Ctrl + Shift + E               # Network
firefox tools: Shift + F2                     # Developer Toolbar
firefox tools: Ctrl + Shift + M               # Responsive Design View
firefox tools: Shift + F4                     # Scratchpad
firefox tools: Ctrl + U                       # Page Source
firefox tools: Ctrl + Shift + J               # Browser Console
firefox tools: Ctrl + I                       # Page Info
firefox pdf: N or J or →                      # Next page
firefox pdf: P or K or ←                      # Previous page
firefox pdf: Ctrl +                           # Zoom in
firefox pdf: Ctrl -                           # Zoom out
firefox pdf: Ctrl + 0                         # Automatic Zoom
firefox pdf: R                                # Rotate the document clockwise
firefox pdf: Shift + R                        # Rotate counterclockwise
firefox pdf: Ctrl + Alt + P                   # Switch to Presentation Mode
firefox pdf: S                                # Choose Text Selection Tool
firefox pdf: H                                # Choose Hand Tool
firefox pdf: Ctrl + Alt + G                   # Focus the Page Number input box
firefox misc: Ctrl + Enter                    # Complete .com Address
firefox misc: Shift + Del                     # Delete Selected Autocomplete Entry
firefox misc: F11                             # Toggle Full Screen
firefox misc: Alt or F10                      # Toggle Menu Bar activation (showing it temporarily when hidden)
firefox misc: Ctrl + Alt + R                  # Toggle Reader Mode
firefox misc: F7                              # Caret Browsing
firefox misc: F6, Alt + D, Ctrl + L           # Focus Address Bar
firefox misc: F6, Ctrl + F                    # Focus Search Field in Library
firefox misc: Esc                             # Stop Autoscroll Mode
firefox misc: Shift + F10                     # Toggle Context Menu
firefox misc: Ctrl + space                    # Show groups
firefox misc: ctrl+1-9                        # Change to a group

vimium nav: ?                    # This help
vimium nav: j                    # Scroll down
vimium nav: k                    # Scroll up
vimium nav: h                    # Scroll left
vimium nav: l                    # Scroll right
vimium nav: gg                   # Scroll to the top of the page
vimium nav: G                    # Scroll to the bottom of the page
vimium nav: zH                   # Scroll all the way to the left
vimium nav: zL                   # Scroll all the way to the right
vimium nav: d                    # Scroll a page down
vimium nav: u                    # Scroll a page up
vimium nav: r                    # Reload current frame (use hard)
vimium nav: gs                   # View page source
vimium nav: yy                   # Copy page's info (use type=url/title/frame, decoded)
vimium nav: yf                   # Copy a link URL to the clipboard
vimium nav: p                    # Open the clipboard's URL in the current tab
vimium nav: P                    # Open the clipboard's URL in N new tab(s)
vimium nav: gu                   # Go up the URL hierarchy (use trailingSlash=null/true/false)
vimium nav: gU                   # Go to root of current URL hierarchy
vimium nav: gi                   # Focus the first visible text box on the page and cycle using tab
vimium nav: f                    # Open a link in the current tab
vimium nav: F                    # Open a link in a new tab
vimium nav: <a-f>                # Open multiple links in a new tab
vimium nav: [[                   # Follow the link labeled previous or "<"
vimium nav: ]]                   # Follow the link labeled next or ">"
vimium nav: gf                   # Cycle forward to the next frame on the page
vimium nav: gF                   # Select the tab's main/top frame
vimium nav: i                    # Enter insert mode (use key:string)
vimium nav: <f8>, v              # Enter visual mode
vimium nav: V                    # Enter visual line mode
vimium nav: m                    # Create a new mark (use swap)
vimium nav: `                    # Go to a mark (use prefix=true, swap, mapKey)
vimium vomni: O                  # Open URL, history, ... in a new tab (use keyword, url)
vimium vomni: b                  # Open a bookmark
vimium vomni:B                   # Open a bookmark in a new tab
vimium vomni:T                   # Search through your open tabs?
vimium vomni:ge                  # Edit the current URL
vimium vomni:gE                  # Edit the current URL and open in a new tab
vimium vomni:gn                  # Toggle styles of vomnibar page (use style=dark, current)
vimium find: /                   # Enter find mode (use last, selected=true)
vimium find: n                   # Cycle forward to the next find match
vimium find: N                   # Cycle backward to the previous find match
vimium find: <a-n>               # Find the second or even earlier query words
vimium history: H                # Go back in history (use reuse=-2/-1)
vimium history: L                # Go forward in history (use reuse=-2/-1)
vimium history: <a-R>            # Reopen current page
vimium tabs: K                   # Go one tab right
vimium tabs: J                   # Go one tab left
vimium tabs: g0                  # Go to the first tab
vimium tabs: g$                  # Go to the last tab
vimium tabs: t                   # Create new tab(s)
vimium tabs: yt                  # Duplicate current tab for N times
vimium tabs: x                   # Close N tab(s) (use mayClose, goto=""/left/right/previous)
vimium tabs: X                   # Restore closed tab(s)
vimium tabs: W                   # Move tab to next window (use right)
vimium tabs: <a-p>               # Pin or unpin N tab(s)
vimium tabs: <a-m>               # Mute or unmute current tab (use all, other)
vimium tabs: ^                   # Go to previously-visited tab on current window
vimium tabs: <<                  # Move tab to the left
vimium tabs: >>                  # Move tab to the right

rofi: Ctrl-v                          # Insert: Paste from clipboard
rofi: Ctrl-Shift-v, Shift-Insert:     # Paste primary selection
rofi: Ctrl-u                          # Clear the line
rofi: Ctrl-                           # Beginning of line
rofi: Ctrl-e                          # End of line
rofi: Ctrl-f Right                    # Forward one character
rofi: Alt-f, Ctrl-Right               # Forward one word
rofi: Ctrl-b, Left                    # Back one character
rofi: Alt-b, Ctrl-Left                # Back one word
rofi: Ctrl-d, Delete                  # Delete character
rofi: Ctrl-Alt-d                      # Delete word
rofi: Ctrl-h, Backspace, Shift-Backspace # Backspace (delete previous character)
rofi: Ctrl-Alt-h                      # Delete previous word
rofi: Ctrl-j,Ctrl-m,Enter             # Accept entry
rofi: Ctrl-n,Down                     # Select next entry
rofi: Ctrl-p,Up                       # Select previous entry
rofi: Page Up                         # Go to previous page
rofi: Page Down                       # Go to next page
rofi: Ctrl-Page Up                    # Go to previous column
rofi: Ctrl-Page Down                  # Go to next column
rofi: Ctrl-Enter                      # Use entered text as a command (in ssh/run modi)
rofi: Shift-Enter                     # Launch the application in a terminal (in run mode)
rofi: Shift-Enter                     # Return the selected entry and move to the next item while keeping rofi open. (in dmenu)
rofi: Shift-Right                     # Switch to the next mode. The list can be customized with the -switchers argument.
rofi: Shift-Left                      # Switch to the previous mode. The list can be customized with the -switchers argument.
rofi: Ctrl-Tab                        # Switch to the next mode. The list can be customized with the -switchers argument.
rofi: Ctrl-Shift-Tab                  # Switch to the previous mode. The list can be customized with the -switchers argument.
rofi: Ctrl-space                      # Set selected item as input text.
rofi: Shift-Del                       # Delete entry from history.
rofi: grave                           # Toggle case sensitivity.
rofi: Alt-grave                       # Toggle sorting.
rofi: Alt-Shift-S                     # Take a screenshot and store it in the Pictures directory.

markdown: # H1                        # heading 1
markdown: ## H2                       # heading 2
markdown: ### H3                      # heading 3
markdown: # H1 {#custom-id}           # heading with id
markdown: **bold text**               # bold
markdown: *italic text*               # italic
markdown: > block quote               # block quote
markdown: ~~text~~                    # strikethrough
markdown: 1. item 2. item 3. item     # ordered/ numbered list
markdown: - item - item - item        # unordered list
markdown: `code`                      # inline code
markdown: ```code```                  # code block
markdown: ---                         # horizontal rule
markdown: [title](url)                # link
markdown: ![alt text](image.jpg)      # image
markdown: - [x] task                  # task list
markdown: sentence. [^1]              # footnote in text body
markdown: [^1]: footnote              # footnote in footer
markdown: term<\n>: definition        # definition

pyenv activate [env_name]             # activate environment
pyenv versions                        # show all python versions on this computer
pyenv which [command]                 # show location of command in activated environment
pyenv install [version]               # install version of python
pyenv install -l                      # list versions available for installation
pyenv virtualenv [version] [env_name] # create new virtualenv
pyenv help [command]                  # show help for command
pyenv uninstall [version]             # uninstall version
pyenv virtualenv-delete [env_name]    # delete environment
pyenv install -l | grep '^  3.'       # show available versions of cpython
pyenv: $PYENV_VERSION                 # environment variable, looks for this first
pyenv: .python-version                # file, looks for this second
pyenv: ~/.pyenv/version               # file, looks for this third, uses system python otherwise

path: ~/.local/share/nvim/plugged     # vim plugin storage
path: ~/.vim/swap                     # vim swap files

linux: groups {user}                  # list groups that {user} is part of
linux: usermod -aG {groups} {user}    # add user to group (groups can be comma separated list)
linux: tail -f {file}                 # show live view of the end of a file (e.g. logs)
linux: wget {url} -O {filename}       # download a file and specify new name
linux: man 0 {command}                # header files
linux: man 0p {command}               # header files (POSIX)
linux: man 1 {command}                # executable programs or shell commands
linux: man 1p {command}               # executable programs or shell commands (POSIX)
linux: man 2 {command}                # system calls (functions provided by the kernel)
linux: man 3 {command}                # library calls (functions within program libraries)
linux: man 3n {command}               # network functions
linux: man 3p {command}               # perl functions
linux: man 4 {command}                # special files (usually found in /dev)
linux: man 5 {command}                # file formats and conventions eg /etc/passwd
linux: man 6 {command}                # games
linux: man 7 {command}                # miscellaneous (including macro packages and conventions)
linux: man 8 {command}                # system administration commands (usually only for root)
linux: man 9 {command}                # kernel routines
linux: man l {command}                # local documentation
linux: man n {command}                # new manpages
linux: source ~/.profile              # reload .profile, if capslock and esc get unswitched

git branch --set-upstream-to=origin/main main # set default upstream so push and pull don't need to specify a branch
git commit --amend --no-edit          # add new changes to previous commit (use fugitive instead)
